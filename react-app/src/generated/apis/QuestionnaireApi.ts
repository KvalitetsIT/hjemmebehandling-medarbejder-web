/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    CreateQuestionnaireRequest,
    CreateQuestionnaireRequestFromJSON,
    CreateQuestionnaireRequestToJSON,
    ErrorDto,
    ErrorDtoFromJSON,
    ErrorDtoToJSON,
    PatchQuestionnaireRequest,
    PatchQuestionnaireRequestFromJSON,
    PatchQuestionnaireRequestToJSON,
    QuestionnaireDto,
    QuestionnaireDtoFromJSON,
    QuestionnaireDtoToJSON,
} from '../models';

export interface CreateQuestionnaireOperationRequest {
    createQuestionnaireRequest: CreateQuestionnaireRequest;
}

export interface GetQuestionnaireByIdRequest {
    id: string;
}

export interface GetQuestionnairesRequest {
    statusesToInclude?: Array<string>;
}

export interface IsQuestionnaireInUseRequest {
    id: string;
}

export interface PatchQuestionnaireOperationRequest {
    id: string;
    patchQuestionnaireRequest: PatchQuestionnaireRequest;
}

export interface RetireQuestionnaireRequest {
    id: string;
}

export interface UpdateQuestionnaireRequest {
    questionnaireDto?: QuestionnaireDto;
}

/**
 * 
 */
export class QuestionnaireApi extends runtime.BaseAPI {

    /**
     * Create a Questionnaire.
     * Create a new Questionnaire.
     */
    async createQuestionnaireRaw(requestParameters: CreateQuestionnaireOperationRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.createQuestionnaireRequest === null || requestParameters.createQuestionnaireRequest === undefined) {
            throw new runtime.RequiredError('createQuestionnaireRequest','Required parameter requestParameters.createQuestionnaireRequest was null or undefined when calling createQuestionnaire.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v1/questionnaire`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateQuestionnaireRequestToJSON(requestParameters.createQuestionnaireRequest),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Create a Questionnaire.
     * Create a new Questionnaire.
     */
    async createQuestionnaire(requestParameters: CreateQuestionnaireOperationRequest, initOverrides?: RequestInit): Promise<void> {
        await this.createQuestionnaireRaw(requestParameters, initOverrides);
    }

    /**
     * Retrieves a Questionnaire by its id.
     * Get Questionnaire by id.
     */
    async getQuestionnaireByIdRaw(requestParameters: GetQuestionnaireByIdRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<QuestionnaireDto>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getQuestionnaireById.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v1/questionnaire/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => QuestionnaireDtoFromJSON(jsonValue));
    }

    /**
     * Retrieves a Questionnaire by its id.
     * Get Questionnaire by id.
     */
    async getQuestionnaireById(requestParameters: GetQuestionnaireByIdRequest, initOverrides?: RequestInit): Promise<QuestionnaireDto> {
        const response = await this.getQuestionnaireByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves a list of Questionnaire.
     * Get all Questionnaires.
     */
    async getQuestionnairesRaw(requestParameters: GetQuestionnairesRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<QuestionnaireDto>>> {
        const queryParameters: any = {};

        if (requestParameters.statusesToInclude) {
            queryParameters['statusesToInclude'] = requestParameters.statusesToInclude;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v1/questionnaire`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(QuestionnaireDtoFromJSON));
    }

    /**
     * Retrieves a list of Questionnaire.
     * Get all Questionnaires.
     */
    async getQuestionnaires(requestParameters: GetQuestionnairesRequest, initOverrides?: RequestInit): Promise<Array<QuestionnaireDto>> {
        const response = await this.getQuestionnairesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns true if the questionnaire is in use by planDefinition and otherwise false if not
     * Checks if the questionnaire is in use by any planDefinitions
     */
    async isQuestionnaireInUseRaw(requestParameters: IsQuestionnaireInUseRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<boolean>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling isQuestionnaireInUse.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v1/questionnaire/{id}/used`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * Returns true if the questionnaire is in use by planDefinition and otherwise false if not
     * Checks if the questionnaire is in use by any planDefinitions
     */
    async isQuestionnaireInUse(requestParameters: IsQuestionnaireInUseRequest, initOverrides?: RequestInit): Promise<boolean> {
        const response = await this.isQuestionnaireInUseRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async patchQuestionnaireRaw(requestParameters: PatchQuestionnaireOperationRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling patchQuestionnaire.');
        }

        if (requestParameters.patchQuestionnaireRequest === null || requestParameters.patchQuestionnaireRequest === undefined) {
            throw new runtime.RequiredError('patchQuestionnaireRequest','Required parameter requestParameters.patchQuestionnaireRequest was null or undefined when calling patchQuestionnaire.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v1/questionnaire/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PatchQuestionnaireRequestToJSON(requestParameters.patchQuestionnaireRequest),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async patchQuestionnaire(requestParameters: PatchQuestionnaireOperationRequest, initOverrides?: RequestInit): Promise<void> {
        await this.patchQuestionnaireRaw(requestParameters, initOverrides);
    }

    /**
     */
    async retireQuestionnaireRaw(requestParameters: RetireQuestionnaireRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling retireQuestionnaire.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v1/questionnaire/{id}/retire`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async retireQuestionnaire(requestParameters: RetireQuestionnaireRequest, initOverrides?: RequestInit): Promise<void> {
        await this.retireQuestionnaireRaw(requestParameters, initOverrides);
    }

    /**
     */
    async updateQuestionnaireRaw(requestParameters: UpdateQuestionnaireRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v1/questionnaire`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: QuestionnaireDtoToJSON(requestParameters.questionnaireDto),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async updateQuestionnaire(requestParameters: UpdateQuestionnaireRequest, initOverrides?: RequestInit): Promise<void> {
        await this.updateQuestionnaireRaw(requestParameters, initOverrides);
    }

}
