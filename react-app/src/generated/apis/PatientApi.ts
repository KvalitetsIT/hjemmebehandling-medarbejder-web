/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CreatePatientRequest,
  ErrorDto,
  PatientDto,
  PatientListResponse,
} from '../models';
import {
    CreatePatientRequestFromJSON,
    CreatePatientRequestToJSON,
    ErrorDtoFromJSON,
    ErrorDtoToJSON,
    PatientDtoFromJSON,
    PatientDtoToJSON,
    PatientListResponseFromJSON,
    PatientListResponseToJSON,
} from '../models';

export interface CreatePatientOperationRequest {
    createPatientRequest: CreatePatientRequest;
}

export interface GetPatientRequest {
    cpr: string;
}

export interface GetPatientsRequest {
    includeActive: boolean;
    includeCompleted: boolean;
    pageNumber?: number;
    pageSize?: number;
}

export interface ResetPasswordRequest {
    cpr: string;
}

export interface SearchPatientsRequest {
    searchString: string;
}

/**
 * 
 */
export class PatientApi extends runtime.BaseAPI {

    /**
     */
    async createPatientRaw(requestParameters: CreatePatientOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.createPatientRequest === null || requestParameters.createPatientRequest === undefined) {
            throw new runtime.RequiredError('createPatientRequest','Required parameter requestParameters.createPatientRequest was null or undefined when calling createPatient.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v1/patient`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreatePatientRequestToJSON(requestParameters.createPatientRequest),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async createPatient(requestParameters: CreatePatientOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.createPatientRaw(requestParameters, initOverrides);
    }

    /**
     */
    async getPatientRaw(requestParameters: GetPatientRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PatientDto>> {
        if (requestParameters.cpr === null || requestParameters.cpr === undefined) {
            throw new runtime.RequiredError('cpr','Required parameter requestParameters.cpr was null or undefined when calling getPatient.');
        }

        const queryParameters: any = {};

        if (requestParameters.cpr !== undefined) {
            queryParameters['cpr'] = requestParameters.cpr;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v1/patient`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PatientDtoFromJSON(jsonValue));
    }

    /**
     */
    async getPatient(requestParameters: GetPatientRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PatientDto> {
        const response = await this.getPatientRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getPatientListRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PatientListResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v1/patientlist`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PatientListResponseFromJSON(jsonValue));
    }

    /**
     */
    async getPatientList(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PatientListResponse> {
        const response = await this.getPatientListRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async getPatientsRaw(requestParameters: GetPatientsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PatientListResponse>> {
        if (requestParameters.includeActive === null || requestParameters.includeActive === undefined) {
            throw new runtime.RequiredError('includeActive','Required parameter requestParameters.includeActive was null or undefined when calling getPatients.');
        }

        if (requestParameters.includeCompleted === null || requestParameters.includeCompleted === undefined) {
            throw new runtime.RequiredError('includeCompleted','Required parameter requestParameters.includeCompleted was null or undefined when calling getPatients.');
        }

        const queryParameters: any = {};

        if (requestParameters.includeActive !== undefined) {
            queryParameters['includeActive'] = requestParameters.includeActive;
        }

        if (requestParameters.includeCompleted !== undefined) {
            queryParameters['includeCompleted'] = requestParameters.includeCompleted;
        }

        if (requestParameters.pageNumber !== undefined) {
            queryParameters['page_number'] = requestParameters.pageNumber;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['page_size'] = requestParameters.pageSize;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v1/patients`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PatientListResponseFromJSON(jsonValue));
    }

    /**
     */
    async getPatients(requestParameters: GetPatientsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PatientListResponse> {
        const response = await this.getPatientsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async resetPasswordRaw(requestParameters: ResetPasswordRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.cpr === null || requestParameters.cpr === undefined) {
            throw new runtime.RequiredError('cpr','Required parameter requestParameters.cpr was null or undefined when calling resetPassword.');
        }

        const queryParameters: any = {};

        if (requestParameters.cpr !== undefined) {
            queryParameters['cpr'] = requestParameters.cpr;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v1/resetpassword`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async resetPassword(requestParameters: ResetPasswordRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.resetPasswordRaw(requestParameters, initOverrides);
    }

    /**
     */
    async searchPatientsRaw(requestParameters: SearchPatientsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PatientListResponse>> {
        if (requestParameters.searchString === null || requestParameters.searchString === undefined) {
            throw new runtime.RequiredError('searchString','Required parameter requestParameters.searchString was null or undefined when calling searchPatients.');
        }

        const queryParameters: any = {};

        if (requestParameters.searchString !== undefined) {
            queryParameters['searchString'] = requestParameters.searchString;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v1/patient/search`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PatientListResponseFromJSON(jsonValue));
    }

    /**
     */
    async searchPatients(requestParameters: SearchPatientsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PatientListResponse> {
        const response = await this.searchPatientsRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
