/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { EnableWhen } from './EnableWhen';
import {
    EnableWhenFromJSON,
    EnableWhenFromJSONTyped,
    EnableWhenToJSON,
} from './EnableWhen';
import type { MeasurementTypeDto } from './MeasurementTypeDto';
import {
    MeasurementTypeDtoFromJSON,
    MeasurementTypeDtoFromJSONTyped,
    MeasurementTypeDtoToJSON,
} from './MeasurementTypeDto';
import type { ThresholdDto } from './ThresholdDto';
import {
    ThresholdDtoFromJSON,
    ThresholdDtoFromJSONTyped,
    ThresholdDtoToJSON,
} from './ThresholdDto';

/**
 * 
 * @export
 * @interface QuestionDto
 */
export interface QuestionDto {
    /**
     * 
     * @type {string}
     * @memberof QuestionDto
     */
    linkId?: string;
    /**
     * 
     * @type {string}
     * @memberof QuestionDto
     */
    text?: string;
    /**
     * 
     * @type {string}
     * @memberof QuestionDto
     */
    abbreviation?: string;
    /**
     * 
     * @type {string}
     * @memberof QuestionDto
     */
    helperText?: string;
    /**
     * 
     * @type {boolean}
     * @memberof QuestionDto
     */
    required?: boolean;
    /**
     * 
     * @type {string}
     * @memberof QuestionDto
     */
    questionType?: QuestionDtoQuestionTypeEnum;
    /**
     * 
     * @type {Array<string>}
     * @memberof QuestionDto
     */
    options?: Array<string>;
    /**
     * 
     * @type {Array<EnableWhen>}
     * @memberof QuestionDto
     */
    enableWhen?: Array<EnableWhen>;
    /**
     * 
     * @type {Array<ThresholdDto>}
     * @memberof QuestionDto
     */
    thresholds?: Array<ThresholdDto>;
    /**
     * 
     * @type {MeasurementTypeDto}
     * @memberof QuestionDto
     */
    measurementType?: MeasurementTypeDto;
    /**
     * 
     * @type {boolean}
     * @memberof QuestionDto
     */
    deprecated?: boolean;
}


/**
 * @export
 */
export const QuestionDtoQuestionTypeEnum = {
    Choice: 'CHOICE',
    Integer: 'INTEGER',
    Quantity: 'QUANTITY',
    String: 'STRING',
    Boolean: 'BOOLEAN',
    Display: 'DISPLAY'
} as const;
export type QuestionDtoQuestionTypeEnum = typeof QuestionDtoQuestionTypeEnum[keyof typeof QuestionDtoQuestionTypeEnum];


/**
 * Check if a given object implements the QuestionDto interface.
 */
export function instanceOfQuestionDto(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function QuestionDtoFromJSON(json: any): QuestionDto {
    return QuestionDtoFromJSONTyped(json, false);
}

export function QuestionDtoFromJSONTyped(json: any, ignoreDiscriminator: boolean): QuestionDto {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'linkId': !exists(json, 'linkId') ? undefined : json['linkId'],
        'text': !exists(json, 'text') ? undefined : json['text'],
        'abbreviation': !exists(json, 'abbreviation') ? undefined : json['abbreviation'],
        'helperText': !exists(json, 'helperText') ? undefined : json['helperText'],
        'required': !exists(json, 'required') ? undefined : json['required'],
        'questionType': !exists(json, 'questionType') ? undefined : json['questionType'],
        'options': !exists(json, 'options') ? undefined : json['options'],
        'enableWhen': !exists(json, 'enableWhen') ? undefined : ((json['enableWhen'] as Array<any>).map(EnableWhenFromJSON)),
        'thresholds': !exists(json, 'thresholds') ? undefined : ((json['thresholds'] as Array<any>).map(ThresholdDtoFromJSON)),
        'measurementType': !exists(json, 'measurementType') ? undefined : MeasurementTypeDtoFromJSON(json['measurementType']),
        'deprecated': !exists(json, 'deprecated') ? undefined : json['deprecated'],
    };
}

export function QuestionDtoToJSON(value?: QuestionDto | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'linkId': value.linkId,
        'text': value.text,
        'abbreviation': value.abbreviation,
        'helperText': value.helperText,
        'required': value.required,
        'questionType': value.questionType,
        'options': value.options,
        'enableWhen': value.enableWhen === undefined ? undefined : ((value.enableWhen as Array<any>).map(EnableWhenToJSON)),
        'thresholds': value.thresholds === undefined ? undefined : ((value.thresholds as Array<any>).map(ThresholdDtoToJSON)),
        'measurementType': MeasurementTypeDtoToJSON(value.measurementType),
        'deprecated': value.deprecated,
    };
}

