/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    PatientDto,
    PatientDtoFromJSON,
    PatientDtoFromJSONTyped,
    PatientDtoToJSON,
    QuestionAnswerPairDto,
    QuestionAnswerPairDtoFromJSON,
    QuestionAnswerPairDtoFromJSONTyped,
    QuestionAnswerPairDtoToJSON,
} from './';

/**
 * 
 * @export
 * @interface QuestionnaireResponseDto
 */
export interface QuestionnaireResponseDto {
    /**
     * Id of the resource
     * @type {string}
     * @memberof QuestionnaireResponseDto
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof QuestionnaireResponseDto
     */
    questionnaireId?: string;
    /**
     * 
     * @type {string}
     * @memberof QuestionnaireResponseDto
     */
    carePlanId?: string;
    /**
     * 
     * @type {string}
     * @memberof QuestionnaireResponseDto
     */
    questionnaireName?: string;
    /**
     * 
     * @type {Array<QuestionAnswerPairDto>}
     * @memberof QuestionnaireResponseDto
     */
    questionAnswerPairs?: Array<QuestionAnswerPairDto>;
    /**
     * 
     * @type {Date}
     * @memberof QuestionnaireResponseDto
     */
    answered?: Date;
    /**
     * 
     * @type {string}
     * @memberof QuestionnaireResponseDto
     */
    examinationStatus?: QuestionnaireResponseDtoExaminationStatusEnum;
    /**
     * 
     * @type {string}
     * @memberof QuestionnaireResponseDto
     */
    triagingCategory?: QuestionnaireResponseDtoTriagingCategoryEnum;
    /**
     * 
     * @type {PatientDto}
     * @memberof QuestionnaireResponseDto
     */
    patient?: PatientDto;
    /**
     * 
     * @type {string}
     * @memberof QuestionnaireResponseDto
     */
    planDefinitionTitle?: string;
}

/**
* @export
* @enum {string}
*/
export enum QuestionnaireResponseDtoExaminationStatusEnum {
    NotExamined = 'NOT_EXAMINED',
    UnderExamination = 'UNDER_EXAMINATION',
    Examined = 'EXAMINED'
}/**
* @export
* @enum {string}
*/
export enum QuestionnaireResponseDtoTriagingCategoryEnum {
    Green = 'GREEN',
    Yellow = 'YELLOW',
    Red = 'RED'
}

export function QuestionnaireResponseDtoFromJSON(json: any): QuestionnaireResponseDto {
    return QuestionnaireResponseDtoFromJSONTyped(json, false);
}

export function QuestionnaireResponseDtoFromJSONTyped(json: any, ignoreDiscriminator: boolean): QuestionnaireResponseDto {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['id'],
        'questionnaireId': !exists(json, 'questionnaireId') ? undefined : json['questionnaireId'],
        'carePlanId': !exists(json, 'carePlanId') ? undefined : json['carePlanId'],
        'questionnaireName': !exists(json, 'questionnaireName') ? undefined : json['questionnaireName'],
        'questionAnswerPairs': !exists(json, 'questionAnswerPairs') ? undefined : ((json['questionAnswerPairs'] as Array<any>).map(QuestionAnswerPairDtoFromJSON)),
        'answered': !exists(json, 'answered') ? undefined : (new Date(json['answered'])),
        'examinationStatus': !exists(json, 'examinationStatus') ? undefined : json['examinationStatus'],
        'triagingCategory': !exists(json, 'triagingCategory') ? undefined : json['triagingCategory'],
        'patient': !exists(json, 'patient') ? undefined : PatientDtoFromJSON(json['patient']),
        'planDefinitionTitle': !exists(json, 'planDefinitionTitle') ? undefined : json['planDefinitionTitle'],
    };
}

export function QuestionnaireResponseDtoToJSON(value?: QuestionnaireResponseDto | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'questionnaireId': value.questionnaireId,
        'carePlanId': value.carePlanId,
        'questionnaireName': value.questionnaireName,
        'questionAnswerPairs': value.questionAnswerPairs === undefined ? undefined : ((value.questionAnswerPairs as Array<any>).map(QuestionAnswerPairDtoToJSON)),
        'answered': value.answered === undefined ? undefined : (value.answered.toISOString()),
        'examinationStatus': value.examinationStatus,
        'triagingCategory': value.triagingCategory,
        'patient': PatientDtoToJSON(value.patient),
        'planDefinitionTitle': value.planDefinitionTitle,
    };
}

